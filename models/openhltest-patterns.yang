module openhltest-patterns {

    yang-version "1.1";
    namespace "http://openhltest.org/yang/types";
    prefix "oht";

    organization
      "OpenHlTest working group";
    contact
      "OpenHlTest working group";
    description
      "This module defines patterns specific to the OpenHLTest models.";

    revision 2018-02-01 {
        description
          "Initial revision.";
        reference
          "0.0.1";
    }

	grouping base-pattern-group {
		description
		"Base patterns for types such as decimal, ipv4, mac, ipv6";
		leaf pattern-type {
			type enumeration {
				enum SINGLE;
				enum INCREMENT;
				enum DECREMENT;
				enum RANDOM;
				enum VALUE_LIST;
			}
			default "SINGLE";
		}
		leaf pattern-format {
			description
			"The format of the pattern.
			This will almost always be a regular expression.
			It is used to determine the validity of the values being set in the child leaf nodes of the pattern.
			";
			config false;
			type string;
		}
		leaf single {
			when "../pattern-type == SINGLE";
			type string;
			must "re-match(single, ../pattern-format)";
		}
		container increment {
			when "../pattern-type == INCREMENT";
			leaf start {
				type string;
				must "re-match(single, ../pattern-format)";
			}
			leaf step {
				type string;
				must "re-match(single, ../pattern-format)";
			}
		}
		container decrement {
			when "../pattern-type == DECREMENT";
			leaf start {
				type string;
				must "re-match(single, ../pattern-format)";
			}
			leaf step {
				type string;
				must "re-match(single, ../pattern-format)";
			}
		}
		container random {
			when "../pattern-type == RANDOM";
			leaf min {
				type string;
				must "re-match(single, ../pattern-format)";
			}			
			leaf max {
				type string;
				must "re-match(single, ../pattern-format)";
			}			
			leaf step {
				type string;
				must "re-match(single, ../pattern-format)";
			}			
			leaf seed {
				type uint32;
			}			
		}
		leaf-list value-list {
			when "../pattern-type == VALUE_LIST";
			type string;
			must "re-match(single, ../pattern-format)";
		}
	}
	grouping bool-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^(true|false|1|0)$';
			}
		}
	}
	grouping int-32-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^(-?(1\d{0,9}|2(0\d{8}|1[0-3]\d{7}|14[0-6]\d{6}|147[0-3]\d{5}|1474[0-7]\d{4}|14748[0-2]\d{3}|147483[0-5]\d{2}|1474836[0-3]\d|14748364[0-7])|[1-9]\d{0,8})|0|-2147483648)$';
			}
		}
	}
	grouping int-64-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^\d+\.?\d{0,2}$';
			}
		}
	}
	grouping decimal-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^\d+\.?\d{0,2}$';
			}
		}
	}
	grouping mac-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$';
			}
		}
	}
	grouping ipv4-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$';
			}
		}
	}
	grouping ipv6-pattern-group {
		uses base-pattern-group {
			refine pattern-format {
				default '^(?=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)(?:(?:25[0-5]|[12][0-4][0-9]|1[5-9][0-9]|[1-9]?[0-9])\.?){4}$|(?=^(?:[0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4}$)(?![^:]*::.+::[^:]*$)(?:(?=.*::.*)|(?=\w+:\w+:\w+:\w+:\w+:\w+:\w+:\w+))(?:(?:^|:)(?:[0-9a-f]{4}|[1-9a-f][0-9a-f]{0,3})){0,8}(?:::(?:[0-9a-f]{1,4}(?:$|:)){0,6})?$';
			}
		}
	}
	grouping enum-pattern-group {
		description
		"Enum patterns.
		Modelers must refine the pattern-format default with a regex of valid enum choices.
		e.g., 
		refine pattern-format {
			default '(8100|88a8|9100|9200|9300)'
		}
		";
		leaf pattern-format {
			config false;
			description
			"Refine this leaf value with a regex of valid enum choices";
			type string;
		}
		leaf pattern-type {
			type enumeration {
				enum SINGLE;
				enum VALUE_LIST;
			}
			default "SINGLE";
		}
		leaf single {
			when "../pattern-type == SINGLE";
			type string;
			must "re-match(single, ../pattern-format)";
		}		
		leaf-list value-list {
			when "../pattern-type == VALUE_LIST";
			type string;
			must "re-match(value-list, ../pattern-format)";
		}
	}
	grouping string-pattern-group {
		description
		"String patterns.
		Modelers must refine the pattern-format default with a regex of valid enum choices.
		e.g., 
		refine pattern-format {
			default '(8100|88a8|9100|9200|9300)'
		}
		";
		leaf pattern-format {
			config false;
			description
			"Refine this leaf value with a regex of valid enum choices";
			type string;
		}
		leaf pattern-type {
			type enumeration {
				enum SINGLE;
				enum STRING;
				enum VALUE_LIST;
			}
			default "SINGLE";
		}
		leaf single {
			when "../pattern-type == SINGLE";
			type string;
			must "re-match(single, ../pattern-format)";
		}		
		leaf string {
			description
			"Vendor specific string patterns";
			when "../pattern-type == STRING";
			type string;
		}
		leaf-list value-list {
			when "../pattern-type == VALUE_LIST";
			type string;
			must "re-match(value-list, ../pattern-format)";
		}
	}
}
