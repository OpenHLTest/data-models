submodule openhltest-traffic-group {

    yang-version "1.1";
    belongs-to "openhltest" {
		prefix "oht";
	}

    import openhltest-types {
        prefix t;
    }
	include openhltest-traffic-protocols;
	include openhltest-port;
	include openhltest-device-groups;

    organization
      "OpenHlTest working group";
    contact
      "OpenHlTest working group";
    description
      "This module describes a collection of traffic groups
	  and associated rpcs.";

    revision 2018-02-09 {
        description
          "Initial revision.";
        reference
          "0.0.1";
    }

    grouping traffic-group-top {
        description
        "A grouping of traffic groups.
		 A traffic group is a collection of traffic streams and flows.
		 Each traffic group has an enpoint-map of a source and destination endpoint.
		 The destination endpoint may be empty if the source endpoint is a /port.
		 Generated frames may be created by the system depending on the encapsulation.
		 The generated and custom frames will al share the same frame-length, frame-load.
		 ";
		
		list traffic-groups {
			key "name";
			description
			"A list of traffic groups";

			leaf name {
				type t:config-list-key;
				description
				"The unique name of a traffic group";
			}
			leaf encapsulation-type {
				type enumeration {
					enum RAW;
					enum ETHERNET;
					enum VLAN;
					enum IPV4;
					enum IPV6;
				}
				default "RAW";
				description "";
			}
			container raw-map {
				when "../encapsulation-type = RAW";
				leaf-list sources {
					type leafref {
						path "../../../ports/name";
					}
				}
				leaf-list destinations {
					type leafref {
						path "../../../ports/name";
					}
				}
			}
			container ethernet-map {
				when "../encapsulation-type = ETHERNET";
				leaf-list sources {
					type leafref {
						path "../../../device-groups/devices/protocols/name";
					}
				}
				leaf-list destinations {
					type leafref {
						path "../../../device-groups/devices/protocols/name";
					}
				}				
			}
			leaf bidirectional {
				type boolean;
				default false;
				description
				"Direction of traffic flow between two end points";
			}
			leaf map-type {
				description
				"The type of endpoint mapping between source and destination endpoints.";
				default "ONE_TO_ONE";
				type enumeration {
					enum ONE_TO_ONE;
					enum FULL_MESHED;
				}
			}
            container frames {
				list generated-frames {
					config false;
					key "name";
					description "List of generated frames driven by the encapsulation.
					Changing the encapsulation will create a new list of frames as dictated by the type of encapsulation.";
					leaf name {
						type t:config-list-key;
					}

				}
				list custom-frames {
					key "name";
					description "List of user defined custom frames. 
					Changing the encapsulation will clear the list of custom frames.";
					leaf name {
						type t:config-list-key;
					}
					leaf frame-link {
						type leafref {
							path "../name";
						}
					}
				}            
			}
			container frame-length {
				leaf length-type {
					type enumeration {
						enum FIXED;
						enum INCREMENTAL;
						enum RANDOM;
						enum AUTO;
						enum PRESET_DISTRIBUTION;
						enum QUAD_GUASSIAN;
						enum WEIGHTED_PAIRS;
					}
				}
                container fixed {
					when "../length-type = FIXED";
                    leaf frame-size {
                        type int32;
						default 64;
                        description
                        "Fixed value for frame length";
                    }
                }
				container increment {
					when "../length-type = INCREMENT";
                    leaf from {
                        type int32;
						default 64;
                        description
                        "Fixed value for frame length";
                    }
					leaf to {
						type int32;
					}
					leaf step {
						type int32;
					}
				}
			}
            container frame-load {
                leaf load-type {
                    description
                    "Load unit applied to the stream block.";
                    type enumeration {
                        enum BPS;
                        enum KBPS;
                        enum MPBS;
                        enum FRAMES_PER_SECOND;
						enum INTER_PACKET_GAP;
						enum PERCENT_LINE_RATE;
                    }
                }
                leaf bps {
					when "../load-type = BPS";
					default "1024000";
                    type int32;
                    description
                    "Load value set on the streamblock/traffic-item in bits per second.";
                }
            }
		}

		action start-traffic {
			description
			"Start one or more traffic groups.
			An empty list signifies that all traffic groups will be started.";

			input {
				leaf-list traffic-group-names {
					description "A list of traffic group names";
					type string;
				}
			}
			output {
				uses t:errata-group {
					description "A list of traffic group resources that failed to start.
					An empty list signifies that all traffic groups successfully started.";
				}
			}
		}
		action stop-traffic {
			description
			"Stop one or more traffic groups. 
			An empty list signifies that all traffic groups will be stopped.";

			input {
				leaf-list traffic-group-names {
					description "A list of traffic group names";
					type string;
				}
			}
			output {
				uses t:errata-group {
					description "A list of traffic group resources that failed to start.
					An empty list signifies that all traffic groups successfully stopped.";
				}
			}
		}
    }
}
