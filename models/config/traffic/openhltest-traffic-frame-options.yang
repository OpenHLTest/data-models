submodule openhltest-traffic-frame-options {

	yang-version "1.1";
	belongs-to "openhltest" {
		prefix "oht";
	}

	import openhltest-types {
		prefix t;
	}
	import openhltest-patterns {
		prefix p;
	}

	grouping traffic-frame-options-group {
		container frame-length {
			leaf length-type {
				type enumeration {
					enum FIXED;
					enum INCREMENTAL;
					enum RANDOM;
					enum AUTO;
					enum IMIX;
					enum CUSTOM_IMIX;
					enum QUAD_GAUSSIAN;
				}
			}
			leaf fixed {
				when "../length-type = FIXED";
				description	"Fixed value for frame length";
				type int32;
				default "64";
			}
			container random {
				when "../length-type = RANDOM";
				description "Random frame size options";
				leaf max {
					type int32;
				}
				leaf min {
					type int32;
				}
			}
			container increment {
				when "../length-type = INCREMENT";
				leaf from {
					type int32;
					default 64;
					description
					"Starting increment value for frame length";
				}
				leaf to {
					type int32;
					description
					"Maximum increment value for frame length";
				}
				leaf step {
					type int32;
					description
					"Step increment value for frame length";
				}
			}
			leaf imix {
				when "../length-type = IMIX";
				type enumeration {
					enum CISCO;
					enum IMIX;
					enum IPSEC_IMIX;
					enum IPV6_IMIX;
					enum RPR_QUAR;
					enum RPR_TRI;
					enum STANDARD_IMIX;
					enum TCP_IMIX;
					enum TOLLY;
				}
				default "CISCO";
			}
			list custom-imix {
				when "../length-type = CUSTOM_IMIX";
				key "name";
				leaf "name" {
					type t:config-list-key;
				} 
				leaf size {
					type int32;
				}
				leaf weight {
					type int32;
				}
			}
			list quad-gaussian {
				when "../length-type = QUAD_GAUSSIAN";
				key "name";
				leaf name {
					type t:config-list-key;
				}
				leaf center {
					type int32;
				}
				leaf width-at-half {
					type int32;
				}
				leaf weight {
					type int32;
				}
			}
		}
		container frame-rate {
			leaf rate-type {
				description
				"Load unit applied to the stream block.";
				type enumeration {
					enum BPS;
					enum KBPS;
					enum MPBS;
					enum FRAMES_PER_SECOND;
					enum INTER_PACKET_GAP;
					enum PERCENT_LINE_RATE;
				}
			}
			leaf bps {
				when "../rate-type = BPS";
				default "1024000";
				type int32;
				description
				"Load value set on the streamblock/traffic-item in bits per second.";
			}
		}
		container frame-payload {
			leaf payload-type {
				type enumeration {
					enum INCREMENT_BYTE;
					enum DECREMENT_BYTE;
					enum INCREMENT_WORD;
					enum DECREMENT_WORD;
					enum CRPAT;
					enum CJPAT;
					enum RANDOM;
					enum CUSTOM;
				}
			}
			container custom {
				when "../payload-type = CUSTOM";
				leaf pattern {
					type string;
				}
				leaf repeat {
					type boolean;
				}
			}
		}
	}
}
