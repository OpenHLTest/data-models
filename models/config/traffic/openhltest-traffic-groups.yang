submodule openhltest-traffic-groups {

    yang-version "1.1";
    belongs-to "openhltest" {
		prefix "oht";
	}

    import openhltest-types {
        prefix t;
    }
	import openhltest-extensions {
		prefix e;
	}
	include openhltest-traffic-frame-options;
	include openhltest-traffic-protocols;
	include openhltest-ports;
	include openhltest-device-groups;

    organization
      "OpenHlTest working group";
    contact
      "OpenHlTest working group";
    description
      "This module describes a collection of traffic groups
	  and associated rpcs.";

    revision 2018-02-09 {
        description
          "Initial revision.";
        reference
          "0.0.1";
    }

    grouping traffic-group-top {
        description "A grouping of traffic groups.";
		
		list traffic-groups {
			description 
			"A traffic group is a wizard in that given a set of criteria it will generate a list of port-streams.

			The following wizard criteria acts as a template for the generated port-streams:
				mesh-type
				bi-directional
				encapsulation
				source-endpoints
				destination-endpoints
				frame-size
				frame-length
				frame-load
				user-frames

			The traffic-groups generation will default port-streams with the following
			Each port-streams instance will be defaulted with the following traffic-groups frame-size, frame-length, frame-load instances.
			The user can then change the individual port-streams child instances.
			Any change to a traffic-groups immediate children will result in the port-streams being regenerated.			
			The following will determine what the port-streams and port-streams/encapsulation-frames lists will contain:
			encapsulation, along with source-endpoints and destination-endpoints will determine 
			what the port-streams and port-streams/encapsulation-frames lists will contain.";

			key "name";
			leaf name {
				type t:config-list-key;
				description
				"The unique name of a traffic group";
			}
			leaf bi-directional {
				type boolean;
				default false;
				description
				"Direction of traffic flow between two end points";
			}
			leaf mesh-type {
				description
				"The type of mapping between sources and destinations endpoints.";
				default "ONE_TO_ONE";
				type enumeration {
					enum ONE_TO_ONE;
					enum FULL_MESHED;
				}
			}
			leaf encapsulation {
				description "The following will determine what the port-streams and port-streams/encapsulation-frames lists will contain:
					mesh-type
					bi-directional
					encapsulation
					source-endpoints
					destination-endpints
				encapsulation, along with source-endpoints and destination-endpoints will determine 
				what the port-streams and port-streams/encapsulation-frames lists will contain.";
				type enumeration {
					enum RAW {
						description "Every port-streams/encapsulation-frames list will be empty.
						Every port-streams/user-frames list will be populated with the entries from the traffic-groups/user-frames list.
						The destination-endpoints does not need to be populated.";
					}
					enum ETHERNET {
						description "The port-streams/encapsulation-frames list will contain an ethernet frame.
						Any source/destination endpoint that does not have an ethernet protocol will be discarded.
						The port-streams/encapsulation-frames list will contain an ethernet frame.";
					}
					enum VLAN {
						description "The port-streams/encapsulation-frames list will contain all frames up and including all vlan protocols.
						Any source/destination endpoint that does not have a vlan protocol will be discarded.
						The port-streams/encapsulation-frames list will contain an ethernet frame.";
					}
					enum IPV4 {
						description "encapsulation-frames will contain the ethernet frame
						Any source/destination endpoint that does not have an ipv4 protocol will be discarded.
						The port-streams/encapsulation-frames list will contain an ethernet frame.";
					}
					enum IPV6 {
						description "encapsulation-frames will contain the ethernet frame
						Any source/destination endpoint that does not have an ipv6 protocol will be discarded.
						The port-streams/encapsulation-frames list will contain an ethernet frame.";
					}
				}
				default RAW;
			}
			leaf-list source-endpoints {
				description "List of 1..n device-groups, devices, protocols references.";
				type union {
					type leafref {
						path "../../../device-groups/name";
					}
					type leafref {
						path "../../../device-groups/devices/name";
					}
					type leafref {
						path "../../../device-groups/devices/protocols/name";
					}
				}
			}
			leaf-list destination-endpoints {
				when "../encapsulation != RAW";
				description "List of 0..n device-groups, devices, protocols references.
				If the mesh-type is FULLY_MESHED then sources and destinations should be merged and any duplicates will be ignored.";
				type union {
					type leafref {
						path "../../../device-groups/name";
					}
					type leafref {
						path "../../../device-groups/devices/name";
					}
					type leafref {
						path "../../../device-groups/devices/protocols/name";
					}
				}
			}
			list user-frames {
				key "name";
				description "List of user defined frames. 
				Changing the encapsulation will clear the list of custom frames.";
				leaf name {
					type t:config-list-key;
				}
				uses traffic-protocols-group;
			} 
			uses traffic-frame-options-group {
				description "Allows a user to set traffic options that will be used as a template during generation of flows.";
			}
			list port-streams {
				e:server-generated;
				key "name";
				leaf name {
					e:server-generated;
					type t:config-list-key;
				}
				uses traffic-frame-options-group {
					description "Allows a user to set traffic options that will be used as a template during generation of flows.";
				}
				list encapsulation-frames {
					e:server-generated;
					key "name";
					description "List of generated frames driven by the encapsulation.
					Changing the encapsulation will create a new list of frames as dictated by the type of encapsulation.";
					leaf name {
						e:server-generated;
						type t:config-list-key;
					}
					uses traffic-protocols-group;
				}
				list user-frames {
					key "name";
					description "List of user defined frames. 
					Changing the encapsulation will clear the list of custom frames.";
					leaf name {
						type t:config-list-key;
					}
					uses traffic-protocols-group;
				}  			
			}
		}
		action start-traffic {
			description
			"Start one or more traffic groups.
			An empty list signifies that all traffic groups will be started.";

			input {
				leaf-list traffic-groups {
					type leafref {
						path "../../traffic-groups/name";
					}
					description "A list of traffic group names";
				}
			}
			output {
				uses t:errata-group {
					description "A list of traffic group resources that failed to start.
					An empty list signifies that all traffic groups successfully started.";
				}
			}
		}
		action stop-traffic {
			description
			"Stop one or more traffic groups. 
			An empty list signifies that all traffic groups will be stopped.";

			input {
				leaf-list traffic-groups {
					type leafref {
						path "../../traffic-groups/name";
					}
					description "A list of traffic group names";
				}
			}
			output {
				uses t:errata-group {
					description "A list of traffic group resources that failed to start.
					An empty list signifies that all traffic groups successfully stopped.";
				}
			}
		}
    }
}
