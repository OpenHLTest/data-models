submodule openhltest-device-groups {

    yang-version "1.1";
    belongs-to "openhltest" {
		prefix "oht";
	}

    import openhltest-types {
        prefix t;
    }
	include openhltest-ethernet;
	include openhltest-vlan;
	include openhltest-ipv4;
	include openhltest-bgp4;

	organization
    "OpenHlTest working group";
    contact
    "OpenHlTest working group";
    description
    "This module describes a collection of emulated networks.";

    revision 2018-02-09 {
        description
          "Initial revision.";
        reference
          "0.0.1";
    }

    grouping device-groups-top {
        description
        "A grouping of device-groups, devices and protocols.";

		list device-groups {
			key "name";
			description
			"A list of device-groups.
			Each device-groups object can contain 0..n devices.";

			leaf name {
				type t:config-list-key;
				description
				"The unique name of a device-groups object.";
			}
			leaf-list port-names {
				description 
				"A list of abstract test port names. 
				Every object in the devices and protocols lists will share the ports assigned to a device-groups object.
				An abstract test port name cannot be assigned to more than one device-groups object.";
				type string;
			}

			list devices {
				description "A list of devices. 
				Each devices object can contain 0..n protocols objects";
				
				key "name";
				leaf name {
					type t:config-list-key;
					description
					"The unique name of a devices object.";
				}
				leaf device-count-per-port {
					description "The number of devices that will be created on each
					abstract test port specified in the port-names list.";
					type uint32 {
						range 1..200000;
					}
					default "1";
				}
				leaf device-link {
					description "Identifies which devices object is connected to this object.
					This is used to create devices behind devices.
					To specify the first devices object in a stack the value must be empty.";
					type union {
						type leafref {
							path "../name";
						}
						type empty;
					}
					default "";
				}
				list protocols {
					description "A list of emulated protocols.
					Each emulated protocols object is a container for one and only one of the emulated protocol types.
					The protocol-type is used to specify what type of protocol in contained in a protocols object.";

					key "name";
					leaf "name" {
						type t:config-list-key;
						description "The unique name of a protocols object";
					}
					leaf parent-protocol-link {
						description "Identifies which protocol is the parent of this protocol.
						This link only applies to protocol objects in one container.
						The link can be used to specify a vertical or horizontal relationship.
						To specify the first protocols object in a stack the value must be empty.";
						type union {
							type leafref {
								path "../name";
							}
							type empty;
						}
						default "";
					}
					leaf connected-protocol-link {
						description "Identifies which protocol in another protocol container is connected to this protocol.
						The protocol name cannot be in the same protocols container.
						An empty link indicates no protocol connection";
						type union {
							type leafref {
								path "../name";
							}
							type empty;
						}
						default "";
					}
					leaf protocol-type {
						description "Determines which detailed emulated protocol container is active.";
						type enumeration {
							enum ETHERNET;
							enum VLAN;
							enum IPV4;
							enum BGP4;
						}
						default "ETHERNET";
					}
					uses ethernet-group {
						description "The conditional container for detailed ethernet information";
						when "../protocol-type = ETHERNET";
					}
					uses vlan-group {
						description "The conditional container for detailed vlan information"; 
						when "../protocol-type = VLAN";
					}
					uses ipv4-group {
						description "The conditional container for detailed ipv4 information"; 
						when "../protocol-type = IPV4";
					}
					uses bgp4-group {
						description "The conditional container for detailed bgp4 information"; 
						when "../protocol-type = BGP4";
					}
				}
			}
		}

		action create-bgp4 {
			input {
				leaf device-group-name {
					mandatory true;
					type string;
				}
				leaf device-name {
					mandatory true;
					type string;
				}
				uses ethernet-group {
					augment ethernet {
						leaf name {
							mandatory true;
							type string;
						}
					}
				}
				uses vlan-group {
					augment vlan {
						leaf name {
							mandatory true;
							type string;
						}
					}					
				}
				uses ipv4-group {
					augment ipv4 {
						leaf name {
							mandatory true;
							type string;
						}
					}
				}
				uses bgp4-group {
					augment bgp4 {
						leaf name {
							mandatory true;
							type string;
						}
					}
				}
			}
		}
		action start-protocols {
			description
			"Start one or more emulated protocol groups.
			An empty list signifies that all protocol groups will be started.";

			input {
				leaf-list protocol-group-names {
					description "A list of protocol group names";
					type string;
				}
			}
			output {
				uses t:errata-group {
					description "A list of protocol group resources that failed to start.
					An empty list signifies that all protocol groups successfully started.";
				}
			}
		}
		action stop-protocols {
			description
			"Stop one or more protocol groups. 
			An empty list signifiels that all protocol groups will be stopped.";

			input {
				leaf-list protocol-group-names {
					description "A list of protocol group names";
					type string;
				}
			}
			output {
				uses t:errata-group {
					description "A list of protocol group resources that failed to stop.
					An empty list signifies that all protocol groups successfully stopped.";
				}
			}
		}
	}
}
